package com.pepcus.apps.security.oauth2.services;

import static com.pepcus.apps.constant.ApplicationConstants.PATTERN_V1;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager;
import org.springframework.security.web.util.matcher.NegatedRequestMatcher;
import org.springframework.security.web.util.matcher.OrRequestMatcher;
import org.springframework.web.servlet.HandlerExceptionResolver;
import com.pepcus.apps.security.permission.AppAuthDataCollectFilter;

/**
 * Class to enable resource server by OAuth2 to access protected Java APIs if valid JWT token is
 * generated by authorization server.
 * 
 * @author Sandeep.Vishwakarma
 *
 */
@Configuration
@EnableResourceServer
public class ResourceServerSecurityConfig extends ResourceServerConfigurerAdapter {

  @Autowired
  @Qualifier("handlerExceptionResolver")
  private HandlerExceptionResolver resolver;

  // @Value("#{'${skip.authorization.urls}'.split(',')}")
  // private List<String> skipAuthorizationUrls;

  @Value("${JWT.jwt_key}")
  private String key;

  @Value("${JWT.jwt_iss}")
  private String iss;

  @Autowired
  private RequestMatcherProvider exeAuthRequestMatcherProvider;

  private AuthenticationManager authenticationManager() throws Exception {
    return new OAuth2AuthenticationManager();
  }

  @Autowired
  private AppTokenEnhancer tokenEnhancer;

  @Override
  public void configure(HttpSecurity http) throws Exception {
    http.requestMatchers()
        .requestMatchers(new NegatedRequestMatcher( // To ignore authorization from OAuth API
            new OrRequestMatcher(exeAuthRequestMatcherProvider.getResourceRequestMatchersToIgnoreAuth())))
        .and().authorizeRequests().antMatchers(PATTERN_V1).authenticated().and()
        .addFilter(new AppAuthDataCollectFilter(authenticationManager(), tokenEnhancer, resolver)).csrf().disable();
  }

}
